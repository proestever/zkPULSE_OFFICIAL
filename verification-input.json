{
  "language": "Solidity",
  "sources": {
    "ERC20Tornado_PCOCK.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./Tornado.sol\";\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract ERC20Tornado_PCOCK is Tornado {\r\n    IERC20 public immutable token;\r\n    \r\n    constructor(\r\n        IVerifier _verifier,\r\n        IHasher _hasher,\r\n        uint256 _denomination,\r\n        uint32 _merkleTreeHeight,\r\n        IERC20 _token\r\n    ) Tornado(_verifier, _hasher, _denomination, _merkleTreeHeight) {\r\n        token = _token;\r\n    }\r\n    \r\n    function _processDeposit() internal override {\r\n        require(token.transferFrom(msg.sender, address(this), denomination), \"Transfer failed\");\r\n    }\r\n    \r\n    function _processWithdraw(\r\n        address payable _recipient,\r\n        address payable _relayer,\r\n        uint256 _fee,\r\n        uint256 _refund\r\n    ) internal override {\r\n        require(msg.value == _refund, \"Incorrect refund amount received\");\r\n        \r\n        require(token.transfer(_recipient, denomination - _fee), \"Transfer to recipient failed\");\r\n        \r\n        if (_fee > 0) {\r\n            require(token.transfer(_relayer, _fee), \"Transfer to relayer failed\");\r\n        }\r\n        \r\n        if (_refund > 0) {\r\n            (bool success, ) = _recipient.call{value: _refund}(\"\");\r\n            require(success, \"Refund transfer failed\");\r\n        }\r\n    }\r\n}"
    },
    "Tornado.sol": {
      "content": "// https://tornado.cash\r\n/*\r\n * d888888P                                           dP              a88888b.                   dP\r\n *    88                                              88             d8'   `88                   88\r\n *    88    .d8888b. 88d888b. 88d888b. .d8888b. .d888b88 .d8888b.    88        .d8888b. .d8888b. 88d888b.\r\n *    88    88'  `88 88'  `88 88'  `88 88'  `88 88'  `88 88'  `88    88        88'  `88 Y8ooooo. 88'  `88\r\n *    88    88.  .88 88       88    88 88.  .88 88.  .88 88.  .88 dP Y8.   .88 88.  .88       88 88    88\r\n *    dP    `88888P' dP       dP    dP `88888P8 `88888P8 `88888P' 88  Y88888P' `88888P8 `88888P' dP    dP\r\n * ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./MerkleTreeWithHistory.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\ninterface IVerifier {\r\n  function verifyProof(bytes memory _proof, uint256[6] memory _input) external returns (bool);\r\n}\r\n\r\nabstract contract Tornado is MerkleTreeWithHistory, ReentrancyGuard {\r\n  IVerifier public immutable verifier;\r\n  uint256 public denomination;\r\n\r\n  mapping(bytes32 => bool) public nullifierHashes;\r\n  // we store all commitments just to prevent accidental deposits with the same commitment\r\n  mapping(bytes32 => bool) public commitments;\r\n\r\n  event Deposit(bytes32 indexed commitment, uint32 leafIndex, uint256 timestamp);\r\n  event Withdrawal(address to, bytes32 nullifierHash, address indexed relayer, uint256 fee);\r\n\r\n  /**\r\n    @dev The constructor\r\n    @param _verifier the address of SNARK verifier for this contract\r\n    @param _hasher the address of MiMC hash contract\r\n    @param _denomination transfer amount for each deposit\r\n    @param _merkleTreeHeight the height of deposits' Merkle Tree\r\n  */\r\n  constructor(\r\n    IVerifier _verifier,\r\n    IHasher _hasher,\r\n    uint256 _denomination,\r\n    uint32 _merkleTreeHeight\r\n  ) MerkleTreeWithHistory(_merkleTreeHeight, _hasher) {\r\n    require(_denomination > 0, \"denomination should be greater than 0\");\r\n    verifier = _verifier;\r\n    denomination = _denomination;\r\n  }\r\n\r\n  /**\r\n    @dev Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.\r\n    @param _commitment the note commitment, which is PedersenHash(nullifier + secret)\r\n  */\r\n  function deposit(bytes32 _commitment) external payable nonReentrant {\r\n    require(!commitments[_commitment], \"The commitment has been submitted\");\r\n\r\n    uint32 insertedIndex = _insert(_commitment);\r\n    commitments[_commitment] = true;\r\n    _processDeposit();\r\n\r\n    emit Deposit(_commitment, insertedIndex, block.timestamp);\r\n  }\r\n\r\n  /** @dev this function is defined in a child contract */\r\n  function _processDeposit() internal virtual;\r\n\r\n  /**\r\n    @dev Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs\r\n    `input` array consists of:\r\n      - merkle root of all deposits in the contract\r\n      - hash of unique deposit nullifier to prevent double spends\r\n      - the recipient of funds\r\n      - optional fee that goes to the transaction sender (usually a relay)\r\n  */\r\n  function withdraw(\r\n    bytes calldata _proof,\r\n    bytes32 _root,\r\n    bytes32 _nullifierHash,\r\n    address payable _recipient,\r\n    address payable _relayer,\r\n    uint256 _fee,\r\n    uint256 _refund\r\n  ) external payable nonReentrant {\r\n    require(_fee <= denomination, \"Fee exceeds transfer value\");\r\n    require(!nullifierHashes[_nullifierHash], \"The note has been already spent\");\r\n    require(isKnownRoot(_root), \"Cannot find your merkle root\"); // Make sure to use a recent one\r\n    require(\r\n      verifier.verifyProof(\r\n        _proof,\r\n        [uint256(_root), uint256(_nullifierHash), uint256(_recipient), uint256(_relayer), _fee, _refund]\r\n      ),\r\n      \"Invalid withdraw proof\"\r\n    );\r\n\r\n    nullifierHashes[_nullifierHash] = true;\r\n    _processWithdraw(_recipient, _relayer, _fee, _refund);\r\n    emit Withdrawal(_recipient, _nullifierHash, _relayer, _fee);\r\n  }\r\n\r\n  /** @dev this function is defined in a child contract */\r\n  function _processWithdraw(\r\n    address payable _recipient,\r\n    address payable _relayer,\r\n    uint256 _fee,\r\n    uint256 _refund\r\n  ) internal virtual;\r\n\r\n  /** @dev whether a note is already spent */\r\n  function isSpent(bytes32 _nullifierHash) public view returns (bool) {\r\n    return nullifierHashes[_nullifierHash];\r\n  }\r\n\r\n  /** @dev whether an array of notes is already spent */\r\n  function isSpentArray(bytes32[] calldata _nullifierHashes) external view returns (bool[] memory spent) {\r\n    spent = new bool[](_nullifierHashes.length);\r\n    for (uint256 i = 0; i < _nullifierHashes.length; i++) {\r\n      if (isSpent(_nullifierHashes[i])) {\r\n        spent[i] = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    "MerkleTreeWithHistory.sol": {
      "content": "// https://tornado.cash\r\n/*\r\n * d888888P                                           dP              a88888b.                   dP\r\n *    88                                              88             d8'   `88                   88\r\n *    88    .d8888b. 88d888b. 88d888b. .d8888b. .d888b88 .d8888b.    88        .d8888b. .d8888b. 88d888b.\r\n *    88    88'  `88 88'  `88 88'  `88 88'  `88 88'  `88 88'  `88    88        88'  `88 Y8ooooo. 88'  `88\r\n *    88    88.  .88 88       88    88 88.  .88 88.  .88 88.  .88 dP Y8.   .88 88.  .88       88 88    88\r\n *    dP    `88888P' dP       dP    dP `88888P8 `88888P8 `88888P' 88  Y88888P' `88888P8 `88888P' dP    dP\r\n * ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\ninterface IHasher {\r\n  function MiMCSponge(uint256 in_xL, uint256 in_xR) external pure returns (uint256 xL, uint256 xR);\r\n}\r\n\r\ncontract MerkleTreeWithHistory {\r\n  uint256 public constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\r\n  uint256 public constant ZERO_VALUE = 21663839004416932945382355908790599225266501822907911457504978515578255421292; // = keccak256(\"tornado\") % FIELD_SIZE\r\n  IHasher public immutable hasher;\r\n\r\n  uint32 public levels;\r\n\r\n  // the following variables are made public for easier testing and debugging and\r\n  // are not supposed to be accessed in regular code\r\n\r\n  // filledSubtrees and roots could be bytes32[size], but using mappings makes it cheaper because\r\n  // it removes index range check on every interaction\r\n  mapping(uint256 => bytes32) public filledSubtrees;\r\n  mapping(uint256 => bytes32) public roots;\r\n  uint32 public constant ROOT_HISTORY_SIZE = 30;\r\n  uint32 public currentRootIndex = 0;\r\n  uint32 public nextIndex = 0;\r\n\r\n  constructor(uint32 _levels, IHasher _hasher) {\r\n    require(_levels > 0, \"_levels should be greater than zero\");\r\n    require(_levels < 32, \"_levels should be less than 32\");\r\n    levels = _levels;\r\n    hasher = _hasher;\r\n\r\n    for (uint32 i = 0; i < _levels; i++) {\r\n      filledSubtrees[i] = zeros(i);\r\n    }\r\n\r\n    roots[0] = zeros(_levels - 1);\r\n  }\r\n\r\n  /**\r\n    @dev Hash 2 tree leaves, returns MiMC(_left, _right)\r\n  */\r\n  function hashLeftRight(\r\n    IHasher _hasher,\r\n    bytes32 _left,\r\n    bytes32 _right\r\n  ) public pure returns (bytes32) {\r\n    require(uint256(_left) < FIELD_SIZE, \"_left should be inside the field\");\r\n    require(uint256(_right) < FIELD_SIZE, \"_right should be inside the field\");\r\n    uint256 R = uint256(_left);\r\n    uint256 C = 0;\r\n    (R, C) = _hasher.MiMCSponge(R, C);\r\n    R = addmod(R, uint256(_right), FIELD_SIZE);\r\n    (R, C) = _hasher.MiMCSponge(R, C);\r\n    return bytes32(R);\r\n  }\r\n\r\n  function _insert(bytes32 _leaf) internal returns (uint32 index) {\r\n    uint32 _nextIndex = nextIndex;\r\n    require(_nextIndex != uint32(2)**levels, \"Merkle tree is full. No more leaves can be added\");\r\n    uint32 currentIndex = _nextIndex;\r\n    bytes32 currentLevelHash = _leaf;\r\n    bytes32 left;\r\n    bytes32 right;\r\n\r\n    for (uint32 i = 0; i < levels; i++) {\r\n      if (currentIndex % 2 == 0) {\r\n        left = currentLevelHash;\r\n        right = zeros(i);\r\n        filledSubtrees[i] = currentLevelHash;\r\n      } else {\r\n        left = filledSubtrees[i];\r\n        right = currentLevelHash;\r\n      }\r\n      currentLevelHash = hashLeftRight(hasher, left, right);\r\n      currentIndex /= 2;\r\n    }\r\n\r\n    uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\r\n    currentRootIndex = newRootIndex;\r\n    roots[newRootIndex] = currentLevelHash;\r\n    nextIndex = _nextIndex + 1;\r\n    return _nextIndex;\r\n  }\r\n\r\n  /**\r\n    @dev Whether the root is present in the root history\r\n  */\r\n  function isKnownRoot(bytes32 _root) public view returns (bool) {\r\n    if (_root == 0) {\r\n      return false;\r\n    }\r\n    uint32 _currentRootIndex = currentRootIndex;\r\n    uint32 i = _currentRootIndex;\r\n    do {\r\n      if (_root == roots[i]) {\r\n        return true;\r\n      }\r\n      if (i == 0) {\r\n        i = ROOT_HISTORY_SIZE;\r\n      }\r\n      i--;\r\n    } while (i != _currentRootIndex);\r\n    return false;\r\n  }\r\n\r\n  /**\r\n    @dev Returns the last root\r\n  */\r\n  function getLastRoot() public view returns (bytes32) {\r\n    return roots[currentRootIndex];\r\n  }\r\n\r\n  /// @dev provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\r\n  function zeros(uint256 i) public pure returns (bytes32) {\r\n    if (i == 0) return bytes32(0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c);\r\n    else if (i == 1) return bytes32(0x256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d);\r\n    else if (i == 2) return bytes32(0x1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200);\r\n    else if (i == 3) return bytes32(0x20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb);\r\n    else if (i == 4) return bytes32(0x0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9);\r\n    else if (i == 5) return bytes32(0x24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959);\r\n    else if (i == 6) return bytes32(0x1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c);\r\n    else if (i == 7) return bytes32(0x19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4);\r\n    else if (i == 8) return bytes32(0x261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80);\r\n    else if (i == 9) return bytes32(0x0058459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007);\r\n    else if (i == 10) return bytes32(0x1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30);\r\n    else if (i == 11) return bytes32(0x1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5);\r\n    else if (i == 12) return bytes32(0x0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f);\r\n    else if (i == 13) return bytes32(0x1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd);\r\n    else if (i == 14) return bytes32(0x133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108);\r\n    else if (i == 15) return bytes32(0x13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6);\r\n    else if (i == 16) return bytes32(0x1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854);\r\n    else if (i == 17) return bytes32(0x0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea);\r\n    else if (i == 18) return bytes32(0x24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d);\r\n    else if (i == 19) return bytes32(0x198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05);\r\n    else if (i == 20) return bytes32(0x29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4);\r\n    else if (i == 21) return bytes32(0x19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967);\r\n    else if (i == 22) return bytes32(0x1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453);\r\n    else if (i == 23) return bytes32(0x10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48);\r\n    else if (i == 24) return bytes32(0x0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1);\r\n    else if (i == 25) return bytes32(0x019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c);\r\n    else if (i == 26) return bytes32(0x2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99);\r\n    else if (i == 27) return bytes32(0x2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354);\r\n    else if (i == 28) return bytes32(0x002df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d);\r\n    else if (i == 29) return bytes32(0x104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427);\r\n    else if (i == 30) return bytes32(0x1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb);\r\n    else if (i == 31) return bytes32(0x2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc);\r\n    else revert(\"Index out of bounds\");\r\n  }\r\n}\r\n"
    },
    "IVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\ninterface IVerifier {\n    function verifyProof(bytes memory _proof, uint256[6] memory _input) external returns (bool);\n}"
    },
    "IHasher.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\ninterface IHasher {\n    function MiMCSponge(uint256 in_xL, uint256 in_xR) external pure returns (uint256 xL, uint256 xR);\n}"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\nabstract contract ReentrancyGuard {\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n    uint256 private _status;\n    constructor() { _status = _NOT_ENTERED; }\n    modifier nonReentrant() {\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n        _status = _ENTERED;\n        _;\n        _status = _NOT_ENTERED;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ]
      }
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "libraries": {}
  }
}